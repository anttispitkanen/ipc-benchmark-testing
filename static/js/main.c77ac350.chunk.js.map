{"version":3,"sources":["charts/DurationsChart.tsx","App.tsx","reportWebVitals.ts","index.tsx","../index.ts"],"names":["colors","background","border","datasetsBase","label","dataProperty","options","scales","y","title","display","text","stacked","x","VerticalBar","chartData","data","mockDataSize","IPC_METHODS_WITH_DATA","Object","values","EIPCMethod","filter","method","some","d","ipcMethod","propData","TheOperationDurationMs","map","statisticsByMockDataSize","find","s","averages","overheadDurationMs","propDataToChartData","labels","datasets","i","backgroundColor","borderColor","borderWidth","chartCompatibleData","dataProp","mockDataSizeProp","id","className","type","width","height","href","availableDatasets","date","App","useState","length","selectedDataset","setSelectedDataset","selectedMockDataSize","setSelectedMockDataSize","target","rel","console","log","DurationsChart","OptionsSelectors","value","onChange","e","ad","ds","EMockDataSize","mds","size","selectFn","activeSize","MockDataSelectorButton","style","margin","disabled","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c77ac350.chunk.js","sourcesContent":["import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport {\n  TStatisticsForIPCMethodWithComparisons,\n  EMockDataSize,\n  EIPCMethod,\n} from 'ipc-benchmark-testing-types';\n\nconst colors = [\n  {\n    background: 'rgba(255, 99, 132, 0.2)',\n    border: 'rgba(255, 99, 132, 1)',\n  },\n  {\n    background: 'rgba(54, 162, 235, 0.2)',\n    border: 'rgba(54, 162, 235, 1)',\n  },\n  {\n    background: 'rgba(255, 206, 86, 0.2)',\n    border: 'rgba(255, 206, 86, 1)',\n  },\n  {\n    background: 'rgba(75, 192, 192, 0.2)',\n    border: 'rgba(75, 192, 192, 1)',\n  },\n  {\n    background: 'rgba(153, 102, 255, 0.2)',\n    border: 'rgba(153, 102, 255, 1)',\n  },\n  {\n    background: 'rgba(255, 159, 64, 0.2)',\n    border: 'rgba(255, 159, 64, 1)',\n  },\n];\n\nconst propDataToChartData = (\n  propData: TStatisticsForIPCMethodWithComparisons[],\n  mockDataSize: EMockDataSize,\n): { TheOperationDurationMs: number[]; overheadDurationMs: number[] } => ({\n  TheOperationDurationMs: propData.map(\n    d =>\n      d.statisticsByMockDataSize.find(s => s.mockDataSize === mockDataSize)\n        ?.averages.TheOperationDurationMs || 0,\n  ),\n  overheadDurationMs: propData.map(\n    d =>\n      d.statisticsByMockDataSize.find(s => s.mockDataSize === mockDataSize)\n        ?.averages.overheadDurationMs || 0,\n  ),\n});\n\nconst datasetsBase: {\n  label: string;\n  dataProperty: 'TheOperationDurationMs' | 'overheadDurationMs';\n}[] = [\n  {\n    label: 'TheOperation duration (ms)',\n    dataProperty: 'TheOperationDurationMs',\n  },\n  {\n    label: 'Overhead duration (ms)',\n    dataProperty: 'overheadDurationMs',\n  },\n];\n\nconst chartCompatibleData = (\n  data: TStatisticsForIPCMethodWithComparisons[],\n  mockDataSize: EMockDataSize,\n) => {\n  /**\n   * Not all methods that exist have data. This is because the methods are\n   * implemented one at a time, and when new EIPCMethods are added to the type,\n   * they aren't added to the old datasets.\n   */\n  const IPC_METHODS_WITH_DATA: EIPCMethod[] = Object.values(EIPCMethod).filter(\n    method => data.some(d => d.ipcMethod === method),\n  );\n\n  const chartData = propDataToChartData(data, mockDataSize);\n\n  return {\n    labels: IPC_METHODS_WITH_DATA,\n    datasets: datasetsBase.map((d, i) => ({\n      label: d.label,\n      data: chartData[d.dataProperty],\n      backgroundColor: colors[i].background,\n      borderColor: colors[i].border,\n      borderWidth: 1,\n    })),\n  };\n};\n\nconst options = {\n  scales: {\n    y: {\n      title: {\n        display: true,\n        text: 'Milliseconds',\n      },\n      stacked: true,\n    },\n    x: {\n      stacked: true,\n    },\n  },\n};\n\nconst VerticalBar = ({\n  dataProp,\n  mockDataSizeProp,\n}: {\n  dataProp: TStatisticsForIPCMethodWithComparisons[];\n  mockDataSizeProp: EMockDataSize;\n}) => {\n  const chartData = chartCompatibleData(dataProp, mockDataSizeProp);\n\n  return (\n    <div id=\"durations-chart\">\n      <h3 className=\"title\">Durations by IPC method</h3>\n\n      <Bar\n        type=\"bar\"\n        width={800}\n        height={500}\n        data={chartData}\n        options={options}\n      />\n\n      <p>\n        <i>\n          <b>Tip:</b> click dataset name to hide it from the chart, and hover\n          for tooltips.\n        </i>\n      </p>\n\n      <p>\n        <b>TheOperation duration</b> describes how many milliseconds it took to\n        run{' '}\n        <a href=\"https://github.com/anttispitkanen/ipc-benchmark-testing/blob/main/shared/TheOperation.ts\">\n          TheOperation\n        </a>{' '}\n        for the given mock data size. The timing starts only when inside the\n        function, so the IPC method doesn't affect its running time.\n      </p>\n\n      <p>\n        <b>Overhead duration</b> describes how many milliseconds it took to pass\n        the data from{' '}\n        <a href=\"https://github.com/anttispitkanen/ipc-benchmark-testing/blob/main/shared/mainProcess.ts\">\n          mainProcess\n        </a>{' '}\n        to TheOperation and back, excluding the time that running TheOperation\n        took. So basically it shows the cost of serializing the data and passing\n        it back and forth between the containers (or just between the two\n        functions in benchmark's case).\n      </p>\n    </div>\n  );\n};\n\nexport default VerticalBar;\n","import React, { useState } from 'react';\nimport DurationsChart from './charts/DurationsChart';\nimport {\n  TStatisticsForIPCMethodWithComparisons,\n  EMockDataSize,\n} from 'ipc-benchmark-testing-types';\n\n// Make all desired datasets available by importing here\nimport data_2021_06_09 from './data/2021-6-9.analyzed.publish.json';\nimport data_2021_06_10 from './data/2021-6-10.analyzed.publish.json';\nimport data_2021_06_13 from './data/2021-6-13.analyzed.publish.json';\nimport data_2021_06_14 from './data/2021-6-14.analyzed.publish.json';\nimport data_2021_06_16 from './data/2021-6-16.analyzed.publish.json';\nimport data_2021_06_17 from './data/2021-6-17.analyzed.publish.json';\n\ntype TDataAndDate = {\n  data: TStatisticsForIPCMethodWithComparisons[];\n  date: string; // like 2021-05-31\n};\n\nconst availableDatasets: TDataAndDate[] = [\n  {\n    data: data_2021_06_09 as unknown as TStatisticsForIPCMethodWithComparisons[],\n    date: '2021-06-09',\n  },\n  {\n    data: data_2021_06_10 as unknown as TStatisticsForIPCMethodWithComparisons[],\n    date: '2021-06-10',\n  },\n  {\n    data: data_2021_06_13 as unknown as TStatisticsForIPCMethodWithComparisons[],\n    date: '2021-06-13',\n  },\n  {\n    data: data_2021_06_14 as unknown as TStatisticsForIPCMethodWithComparisons[],\n    date: '2021-06-14',\n  },\n  {\n    data: data_2021_06_16 as unknown as TStatisticsForIPCMethodWithComparisons[],\n    date: '2021-06-16',\n  },\n  {\n    data: data_2021_06_17 as unknown as TStatisticsForIPCMethodWithComparisons[],\n    date: '2021-06-17',\n  },\n];\n\nfunction App() {\n  const [selectedDataset, setSelectedDataset] = useState<TDataAndDate>(\n    availableDatasets[availableDatasets.length - 1],\n  );\n\n  const [selectedMockDataSize, setSelectedMockDataSize] =\n    useState<EMockDataSize>('medium' as EMockDataSize.MEDIUM);\n\n  return (\n    <div className=\"App-wrapper\">\n      <div className=\"App\">\n        <header>\n          <h1>IPC method latency testing</h1>\n          <p>\n            By <a href=\"https://github.com/anttispitkanen\">@anttispitkanen</a>\n          </p>\n        </header>\n\n        <div className=\"main-content\">\n          <section>\n            <p>\n              This is{' '}\n              <a href=\"https://github.com/anttispitkanen/ipc-benchmark-testing\">\n                a project\n              </a>{' '}\n              that compares the latency cost of different methods of\n              transferring data between two containers in the same loopback\n              network interface, like a Kubernetes pod or ECS task, i.e. without\n              having to worry about network latency.{' '}\n              <a\n                href=\"https://en.wikipedia.org/wiki/Inter-process_communication\"\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n              >\n                See Wikipedia on inter-process communication (IPC)\n              </a>\n              .\n            </p>\n\n            <p>\n              See{' '}\n              <a href=\"https://github.com/anttispitkanen/ipc-benchmark-testing\">\n                the repo\n              </a>{' '}\n              for more information on how this works and how to run the tests\n              yourself.\n            </p>\n\n            <p>See console for raw data.</p>\n\n            {console.log('Here are the analyzed results:')}\n            {console.log(selectedDataset.data)}\n\n            <p>\n              All tests run on MacBook Air M1 2020 16 GB, Docker Desktop for\n              Mac, Docker engine{' '}\n              <span className=\"monospace-highlight\">v20.10.7</span>, at settings\n              of <span className=\"monospace-highlight\">4 CPU</span>,{' '}\n              <span className=\"monospace-highlight\">2 GB RAM</span> and{' '}\n              <span className=\"monospace-highlight\">1 GB Swap</span>.\n            </p>\n          </section>\n\n          <hr />\n\n          <section>\n            <h2>How this works</h2>\n\n            <p>\n              This test doesn't aim to be highly generalizable, but rather very\n              specific. Basically there is simple JSON mock data (\"comments\" as\n              provided by{' '}\n              <a href=\"https://jsonplaceholder.typicode.com/comments\">\n                JSONPlaceholder\n              </a>\n              ) in three different sizes:\n            </p>\n\n            <ul>\n              <li>small = 1.5K</li>\n              <li>medium = 154K</li>\n              <li>large = 770K</li>\n            </ul>\n\n            <p>\n              To simulate whatever the computationally intensive operation would\n              be, there's{' '}\n              <a href=\"https://github.com/anttispitkanen/ipc-benchmark-testing/blob/main/shared/TheOperation.ts\">\n                \"TheOperation\"\n              </a>\n              . It takes the mock data and runs some arbitrary synchronous\n              blocking operations on it: finding out the shortest and longest\n              comment names, and finding the top 5 most commonly used words in\n              the comment bodies. It responds with this data, along with the\n              time it took to process the data.\n            </p>\n            <p>\n              The actual test runs a{' '}\n              <a href=\"https://github.com/anttispitkanen/ipc-benchmark-testing/blob/main/shared/mainProcess.ts\">\n                \"main process\"\n              </a>{' '}\n              script, that loads the mock data into memory and passes it to\n              \"TheOperation\" with the desired data transport method given as a\n              dependency injection. All the different methods run the same\n              TheOperation script, the difference is in how the data is passed\n              to TheOperation (i.e. over HTTP).\n            </p>\n            <p>\n              \"Main process\" runs and takes time of the whole thing. It\n              calculates the results:\n            </p>\n            <ul>\n              <li>\n                The whole process duration including data transfer latency and\n                running TheOperation\n              </li>\n              <li>The duration of TheOperation</li>\n              <li>\n                Overhead duration = whole duration - TheOperation duration\n              </li>{' '}\n              <li>\n                Overhead percentage, i.e. how many percent of the whole duration\n                was in the overhead\n              </li>\n            </ul>\n          </section>\n\n          <hr />\n\n          <section>\n            <h2>Tested IPC methods</h2>\n\n            <p>\n              <a href=\"https://github.com/anttispitkanen/ipc-benchmark-testing/tree/main/ipc-methods/benchmark\">\n                <b>benchmark</b>\n              </a>{' '}\n              just runs main process and TheOperation in the same process,\n              handling all the data in memory without need to (de)serialize it.\n              There is no real overhead in transporting the data, but whatever\n              \"overhead\" is spent is the baseline that the other methods are\n              compared to.\n            </p>\n\n            <p>\n              <a href=\"https://github.com/anttispitkanen/ipc-benchmark-testing/tree/main/ipc-methods/unix-socket\">\n                <b>unix-socket</b>\n              </a>{' '}\n              uses the Nodejs built-in{' '}\n              <span className=\"monospace-highlight\">net</span> library over a\n              Unix socket to transport the data between a client and a server\n              running TheOperation. The data is serialized using JSON, with a\n              custom delimiter character set. The Unix socket file is shared to\n              both containers using a named Docker Volume in the compose file.\n            </p>\n\n            <p>\n              <a href=\"https://github.com/anttispitkanen/ipc-benchmark-testing/tree/main/ipc-methods/tcp\">\n                <b>tcp</b>\n              </a>{' '}\n              uses TCP with the Nodejs built-in{' '}\n              <span className=\"monospace-highlight\">net</span> library, to\n              transport the data between a client running main process and a\n              server running TheOperation. The data is serialized using JSON\n              with a custom delimiter character set.\n            </p>\n\n            <p>\n              <a href=\"https://github.com/anttispitkanen/ipc-benchmark-testing/tree/main/ipc-methods/http\">\n                <b>http</b>\n              </a>{' '}\n              uses \"raw\" HTTP, meaning the Nodejs built-in{' '}\n              <span className=\"monospace-highlight\">http</span> library, to\n              transport the data between a client running main process and a\n              server running TheOperation. The data is serialized using JSON.\n            </p>\n\n            <p>\n              <a href=\"https://github.com/anttispitkanen/ipc-benchmark-testing/tree/main/ipc-methods/http-express-axios\">\n                <b>http-express-axios</b>\n              </a>{' '}\n              uses the commonly used Nodejs HTTP server Express and the commonly\n              used Nodejs HTTP client Axios. Data is serialized as JSON, and the\n              parsing and serializing is handled by the libraries under the\n              hood.\n            </p>\n\n            <p>\n              <a href=\"https://github.com/anttispitkanen/ipc-benchmark-testing/tree/main/ipc-methods/https\">\n                <b>https</b>\n              </a>{' '}\n              uses self signed certificates to provide TLS for a HTTPS\n              connection, using the Nodejs built-in{' '}\n              <span className=\"monospace-highlight\">https</span> library, to\n              transport the data between a client and a server running\n              TheOperation. The data is serialized using JSON.\n            </p>\n          </section>\n\n          <hr />\n\n          <section>\n            <h2>Results</h2>\n\n            <OptionsSelectors\n              selectedDataset={selectedDataset}\n              setSelectedDataset={setSelectedDataset}\n              selectedMockDataSize={selectedMockDataSize}\n              setSelectedMockDataSize={setSelectedMockDataSize}\n            />\n\n            <DurationsChart\n              dataProp={selectedDataset.data}\n              mockDataSizeProp={selectedMockDataSize}\n            />\n\n            <OptionsSelectors\n              selectedDataset={selectedDataset}\n              setSelectedDataset={setSelectedDataset}\n              selectedMockDataSize={selectedMockDataSize}\n              setSelectedMockDataSize={setSelectedMockDataSize}\n            />\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nconst OptionsSelectors = ({\n  selectedDataset,\n  setSelectedDataset,\n  selectedMockDataSize,\n  setSelectedMockDataSize,\n}: {\n  selectedDataset: TDataAndDate;\n  setSelectedDataset: (dataset: TDataAndDate) => void;\n  selectedMockDataSize: EMockDataSize;\n  setSelectedMockDataSize: (mockDataSize: EMockDataSize) => void;\n}) => (\n  <div className=\"options-selectors\">\n    <span>\n      Viewing test suite run on:{' '}\n      <select\n        value={selectedDataset.date}\n        onChange={e =>\n          setSelectedDataset(\n            availableDatasets.find(ad => ad.date === e.target.value)!,\n          )\n        }\n      >\n        {availableDatasets.map(ds => (\n          <option key={ds.date}>{ds.date}</option>\n        ))}\n      </select>\n    </span>\n\n    <span>\n      Viewing mock data size: <b>{selectedMockDataSize}</b>\n    </span>\n\n    <span>\n      {Object.values(EMockDataSize).map(mds => (\n        <MockDataSelectorButton\n          key={mds}\n          size={mds}\n          selectFn={setSelectedMockDataSize}\n          activeSize={selectedMockDataSize}\n        />\n      ))}\n    </span>\n  </div>\n);\n\nconst MockDataSelectorButton = ({\n  size,\n  selectFn,\n  activeSize,\n}: {\n  size: EMockDataSize;\n  selectFn: (size: EMockDataSize) => void;\n  activeSize: EMockDataSize;\n}) => (\n  <button\n    style={{ margin: '5px' }}\n    disabled={size === activeSize}\n    onClick={() => selectFn(size)}\n  >\n    {size}\n  </button>\n);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EMockDataSize = exports.EIPCMethod = void 0;\n/**\n * All the IPC methods need to be defined here. Add new\n * ones here if new ones are implemented.\n */\nvar EIPCMethod;\n(function (EIPCMethod) {\n    EIPCMethod[\"BENCHMARK\"] = \"benchmark\";\n    EIPCMethod[\"UNIX_SOCKET\"] = \"unix-socket\";\n    EIPCMethod[\"TCP\"] = \"tcp\";\n    EIPCMethod[\"HTTP\"] = \"http\";\n    EIPCMethod[\"HTTP_EXPRESS_AXIOS\"] = \"http-express-axios\";\n    EIPCMethod[\"HTTPS\"] = \"https\";\n})(EIPCMethod = exports.EIPCMethod || (exports.EIPCMethod = {}));\n/**\n * All the mock data sizes need to be listed here (in a sensible)\n * order. Add new ones here if new ones are implemented.\n */\nvar EMockDataSize;\n(function (EMockDataSize) {\n    EMockDataSize[\"SMALL\"] = \"small\";\n    EMockDataSize[\"MEDIUM\"] = \"medium\";\n    EMockDataSize[\"LARGE\"] = \"large\";\n})(EMockDataSize = exports.EMockDataSize || (exports.EMockDataSize = {}));\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}