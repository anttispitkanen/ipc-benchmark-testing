{"version":3,"sources":["charts/DurationsChart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ipcMethodsForLabels","mockDataSizes","colors","background","border","datasetsBase","label","dataProperty","options","scales","y","title","display","text","stacked","x","MockDataSelectorButton","size","selectFn","activeSize","style","margin","disabled","onClick","VerticalBar","dataProp","useState","mockDataSize","setMockDataSize","chartData","useMemo","data","propData","TheOperationDurationMs","map","d","statisticsByMockDataSize","find","s","averages","overheadDurationMs","propDataToChartData","labels","datasets","i","backgroundColor","borderColor","borderWidth","chartCompatibleData","className","type","width","height","mds","App","console","log","typedData","href","target","rel","Date","runs","timestamp","toLocaleDateString","DurationsChart","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e8a796c.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport type {\n  TStatisticsForIPCMethodWithComparisons,\n  EMockDataSize,\n  EIPCMethod,\n} from 'ipc-benchmark-testing-types';\n\n// FIXME: read values from enum once typing is fixed\nconst ipcMethodsForLabels = [\n  'benchmark',\n  'http',\n  'http-express-axios',\n] as EIPCMethod[];\n\n// FIXME: read values from enum once typing is fixed\nconst mockDataSizes = ['small', 'medium', 'large'] as EMockDataSize[];\n\nconst colors = [\n  {\n    background: 'rgba(255, 99, 132, 0.2)',\n    border: 'rgba(255, 99, 132, 1)',\n  },\n  {\n    background: 'rgba(54, 162, 235, 0.2)',\n    border: 'rgba(54, 162, 235, 1)',\n  },\n  {\n    background: 'rgba(255, 206, 86, 0.2)',\n    border: 'rgba(255, 206, 86, 1)',\n  },\n  {\n    background: 'rgba(75, 192, 192, 0.2)',\n    border: 'rgba(75, 192, 192, 1)',\n  },\n  {\n    background: 'rgba(153, 102, 255, 0.2)',\n    border: 'rgba(153, 102, 255, 1)',\n  },\n  {\n    background: 'rgba(255, 159, 64, 0.2)',\n    border: 'rgba(255, 159, 64, 1)',\n  },\n];\n\nconst propDataToChartData = (\n  propData: TStatisticsForIPCMethodWithComparisons[],\n  mockDataSize: EMockDataSize,\n): { TheOperationDurationMs: number[]; overheadDurationMs: number[] } => ({\n  TheOperationDurationMs: propData.map(\n    d =>\n      d.statisticsByMockDataSize.find(s => s.mockDataSize === mockDataSize)\n        ?.averages.TheOperationDurationMs || 0,\n  ),\n  overheadDurationMs: propData.map(\n    d =>\n      d.statisticsByMockDataSize.find(s => s.mockDataSize === mockDataSize)\n        ?.averages.overheadDurationMs || 0,\n  ),\n});\n\nconst datasetsBase: {\n  label: string;\n  dataProperty: 'TheOperationDurationMs' | 'overheadDurationMs';\n}[] = [\n  {\n    label: 'TheOperation duration (ms)',\n    dataProperty: 'TheOperationDurationMs',\n  },\n  {\n    label: 'Overhead duration (ms)',\n    dataProperty: 'overheadDurationMs',\n  },\n];\n\nconst chartCompatibleData = (\n  data: TStatisticsForIPCMethodWithComparisons[],\n  mockDataSize: EMockDataSize,\n) => {\n  const chartData = propDataToChartData(data, mockDataSize);\n\n  return {\n    labels: ipcMethodsForLabels, // FIXME: read values from enum once typing is fixed\n    datasets: datasetsBase.map((d, i) => ({\n      label: d.label,\n      data: chartData[d.dataProperty],\n      backgroundColor: colors[i].background,\n      borderColor: colors[i].border,\n      borderWidth: 1,\n    })),\n  };\n};\n\nconst options = {\n  scales: {\n    y: {\n      title: {\n        display: true,\n        text: 'Milliseconds',\n      },\n      stacked: true,\n    },\n    x: {\n      stacked: true,\n    },\n  },\n};\n\nconst MockDataSelectorButton = ({\n  size,\n  selectFn,\n  activeSize,\n}: {\n  size: EMockDataSize;\n  selectFn: (size: EMockDataSize) => void;\n  activeSize: EMockDataSize;\n}) => (\n  <button\n    style={{ margin: '5px' }}\n    disabled={size === activeSize}\n    onClick={() => selectFn(size)}\n  >\n    {size}\n  </button>\n);\n\nconst VerticalBar = ({\n  dataProp,\n}: {\n  dataProp: TStatisticsForIPCMethodWithComparisons[];\n}) => {\n  const [mockDataSize, setMockDataSize] = useState<EMockDataSize>(\n    'medium' as EMockDataSize.MEDIUM,\n  );\n\n  const chartData = useMemo(\n    () => chartCompatibleData(dataProp, mockDataSize),\n    [mockDataSize],\n  );\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1 className=\"title\">Durations by IPC method</h1>\n      </div>\n      <Bar\n        type=\"bar\"\n        width={800}\n        height={500}\n        data={chartData}\n        options={options}\n      />\n      <div>\n        <p>\n          Viewing mock data size: <b>{mockDataSize}</b>\n        </p>\n\n        {mockDataSizes.map(mds => (\n          <MockDataSelectorButton\n            size={mds}\n            selectFn={setMockDataSize}\n            activeSize={mockDataSize}\n          />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default VerticalBar;\n","import React from 'react';\nimport data from './data/2021-5-31.analyzed.publish.json';\nimport DurationsChart from './charts/DurationsChart';\nimport type { TStatisticsForIPCMethodWithComparisons } from 'ipc-benchmark-testing-types';\n\nfunction App() {\n  console.log('Here are the analyzed results:');\n  console.log(data);\n\n  const typedData = data as unknown as TStatisticsForIPCMethodWithComparisons[];\n\n  return (\n    <div className=\"App\">\n      <h1>IPC testing results</h1>\n\n      <p>\n        See{' '}\n        <a\n          href=\"https://github.com/anttispitkanen/ipc-benchmark-testing\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          the repo\n        </a>{' '}\n        for context.\n      </p>\n\n      <p>\n        All tests run on Docker Desktop for Mac, Docker engine v20.10.6, at 8\n        CPU and 4GB RAM.\n      </p>\n\n      <p>\n        Test suite run on{' '}\n        <b>\n          {new Date(\n            typedData[0].statisticsByMockDataSize[0].runs[0].timestamp,\n          ).toLocaleDateString()}\n        </b>\n      </p>\n\n      <DurationsChart dataProp={typedData} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}