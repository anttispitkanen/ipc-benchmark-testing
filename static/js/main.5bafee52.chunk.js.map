{"version":3,"sources":["charts/DurationsChart.tsx","App.tsx","reportWebVitals.ts","index.tsx","../index.ts"],"names":["colors","background","border","datasetsBase","label","dataProperty","options","scales","y","title","display","text","stacked","x","VerticalBar","chartData","data","mockDataSize","propData","TheOperationDurationMs","map","d","statisticsByMockDataSize","find","s","averages","overheadDurationMs","propDataToChartData","labels","Object","values","EIPCMethod","datasets","i","backgroundColor","borderColor","borderWidth","chartCompatibleData","dataProp","mockDataSizeProp","id","className","type","width","height","availableDatasets","date","App","useState","length","selectedDataset","setSelectedDataset","selectedMockDataSize","setSelectedMockDataSize","href","target","rel","console","log","DurationsChart","OptionsSelectors","value","onChange","e","ad","ds","EMockDataSize","mds","size","selectFn","activeSize","MockDataSelectorButton","style","margin","disabled","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bafee52.chunk.js","sourcesContent":["import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport {\n  TStatisticsForIPCMethodWithComparisons,\n  EMockDataSize,\n  EIPCMethod,\n} from 'ipc-benchmark-testing-types';\n\nconst colors = [\n  {\n    background: 'rgba(255, 99, 132, 0.2)',\n    border: 'rgba(255, 99, 132, 1)',\n  },\n  {\n    background: 'rgba(54, 162, 235, 0.2)',\n    border: 'rgba(54, 162, 235, 1)',\n  },\n  {\n    background: 'rgba(255, 206, 86, 0.2)',\n    border: 'rgba(255, 206, 86, 1)',\n  },\n  {\n    background: 'rgba(75, 192, 192, 0.2)',\n    border: 'rgba(75, 192, 192, 1)',\n  },\n  {\n    background: 'rgba(153, 102, 255, 0.2)',\n    border: 'rgba(153, 102, 255, 1)',\n  },\n  {\n    background: 'rgba(255, 159, 64, 0.2)',\n    border: 'rgba(255, 159, 64, 1)',\n  },\n];\n\nconst propDataToChartData = (\n  propData: TStatisticsForIPCMethodWithComparisons[],\n  mockDataSize: EMockDataSize,\n): { TheOperationDurationMs: number[]; overheadDurationMs: number[] } => ({\n  TheOperationDurationMs: propData.map(\n    d =>\n      d.statisticsByMockDataSize.find(s => s.mockDataSize === mockDataSize)\n        ?.averages.TheOperationDurationMs || 0,\n  ),\n  overheadDurationMs: propData.map(\n    d =>\n      d.statisticsByMockDataSize.find(s => s.mockDataSize === mockDataSize)\n        ?.averages.overheadDurationMs || 0,\n  ),\n});\n\nconst datasetsBase: {\n  label: string;\n  dataProperty: 'TheOperationDurationMs' | 'overheadDurationMs';\n}[] = [\n  {\n    label: 'TheOperation duration (ms)',\n    dataProperty: 'TheOperationDurationMs',\n  },\n  {\n    label: 'Overhead duration (ms)',\n    dataProperty: 'overheadDurationMs',\n  },\n];\n\nconst chartCompatibleData = (\n  data: TStatisticsForIPCMethodWithComparisons[],\n  mockDataSize: EMockDataSize,\n) => {\n  const chartData = propDataToChartData(data, mockDataSize);\n\n  return {\n    labels: Object.values(EIPCMethod),\n    datasets: datasetsBase.map((d, i) => ({\n      label: d.label,\n      data: chartData[d.dataProperty],\n      backgroundColor: colors[i].background,\n      borderColor: colors[i].border,\n      borderWidth: 1,\n    })),\n  };\n};\n\nconst options = {\n  scales: {\n    y: {\n      title: {\n        display: true,\n        text: 'Milliseconds',\n      },\n      stacked: true,\n    },\n    x: {\n      stacked: true,\n    },\n  },\n};\n\nconst VerticalBar = ({\n  dataProp,\n  mockDataSizeProp,\n}: {\n  dataProp: TStatisticsForIPCMethodWithComparisons[];\n  mockDataSizeProp: EMockDataSize;\n}) => {\n  const chartData = chartCompatibleData(dataProp, mockDataSizeProp);\n\n  return (\n    <div id=\"durations-chart\">\n      <h2 className=\"title\">Durations by IPC method</h2>\n      <Bar\n        type=\"bar\"\n        width={800}\n        height={500}\n        data={chartData}\n        options={options}\n      />\n    </div>\n  );\n};\n\nexport default VerticalBar;\n","import React, { useState } from 'react';\nimport DurationsChart from './charts/DurationsChart';\nimport {\n  TStatisticsForIPCMethodWithComparisons,\n  EMockDataSize,\n} from 'ipc-benchmark-testing-types';\n\n// Make all desired datasets available by importing here\nimport data_2021_06_09 from './data/2021-6-9.analyzed.publish.json';\nimport data_2021_06_10 from './data/2021-6-10.analyzed.publish.json';\n\ntype TDataAndDate = {\n  data: TStatisticsForIPCMethodWithComparisons[];\n  date: string; // like 2021-05-31\n};\n\nconst availableDatasets: TDataAndDate[] = [\n  {\n    data: data_2021_06_09 as unknown as TStatisticsForIPCMethodWithComparisons[],\n    date: '2021-06-09',\n  },\n  {\n    data: data_2021_06_10 as unknown as TStatisticsForIPCMethodWithComparisons[],\n    date: '2021-06-10',\n  },\n];\n\nfunction App() {\n  const [selectedDataset, setSelectedDataset] = useState<TDataAndDate>(\n    availableDatasets[availableDatasets.length - 1],\n  );\n\n  const [selectedMockDataSize, setSelectedMockDataSize] =\n    useState<EMockDataSize>('medium' as EMockDataSize.MEDIUM);\n\n  return (\n    <div className=\"App-wrapper\">\n      <div className=\"App\">\n        <h1>IPC testing results</h1>\n\n        <div className=\"intro\">\n          <p>\n            See{' '}\n            <a\n              href=\"https://github.com/anttispitkanen/ipc-benchmark-testing\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              the repo\n            </a>{' '}\n            for context. See console for raw data.\n          </p>\n\n          {console.log('Here are the analyzed results:')}\n          {console.log(selectedDataset.data)}\n\n          <p>\n            All tests run on MacBook Air M1 2020 16 GB, Docker Desktop for Mac,\n            Docker engine <span className=\"monospace-highlight\">v20.10.7</span>,\n            at settings of <span className=\"monospace-highlight\">4 CPU</span>,{' '}\n            <span className=\"monospace-highlight\">2 GB RAM</span> and{' '}\n            <span className=\"monospace-highlight\">1 GB Swap</span>.\n          </p>\n\n          <hr />\n        </div>\n\n        <OptionsSelectors\n          selectedDataset={selectedDataset}\n          setSelectedDataset={setSelectedDataset}\n          selectedMockDataSize={selectedMockDataSize}\n          setSelectedMockDataSize={setSelectedMockDataSize}\n        />\n\n        <DurationsChart\n          dataProp={selectedDataset.data}\n          mockDataSizeProp={selectedMockDataSize}\n        />\n\n        <OptionsSelectors\n          selectedDataset={selectedDataset}\n          setSelectedDataset={setSelectedDataset}\n          selectedMockDataSize={selectedMockDataSize}\n          setSelectedMockDataSize={setSelectedMockDataSize}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nconst OptionsSelectors = ({\n  selectedDataset,\n  setSelectedDataset,\n  selectedMockDataSize,\n  setSelectedMockDataSize,\n}: {\n  selectedDataset: TDataAndDate;\n  setSelectedDataset: (dataset: TDataAndDate) => void;\n  selectedMockDataSize: EMockDataSize;\n  setSelectedMockDataSize: (mockDataSize: EMockDataSize) => void;\n}) => (\n  <div className=\"options-selectors\">\n    <p>\n      Viewing test suite run on:{' '}\n      <select\n        value={selectedDataset.date}\n        onChange={e =>\n          setSelectedDataset(\n            availableDatasets.find(ad => ad.date === e.target.value)!,\n          )\n        }\n      >\n        {availableDatasets.map(ds => (\n          <option>{ds.date}</option>\n        ))}\n      </select>\n    </p>\n\n    <p>\n      Viewing mock data size: <b>{selectedMockDataSize}</b>\n    </p>\n\n    {Object.values(EMockDataSize).map(mds => (\n      <MockDataSelectorButton\n        size={mds}\n        selectFn={setSelectedMockDataSize}\n        activeSize={selectedMockDataSize}\n      />\n    ))}\n  </div>\n);\n\nconst MockDataSelectorButton = ({\n  size,\n  selectFn,\n  activeSize,\n}: {\n  size: EMockDataSize;\n  selectFn: (size: EMockDataSize) => void;\n  activeSize: EMockDataSize;\n}) => (\n  <button\n    style={{ margin: '5px' }}\n    disabled={size === activeSize}\n    onClick={() => selectFn(size)}\n  >\n    {size}\n  </button>\n);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EMockDataSize = exports.EIPCMethod = void 0;\n/**\n * All the IPC methods need to be defined here. Add new\n * ones here if new ones are implemented.\n */\nvar EIPCMethod;\n(function (EIPCMethod) {\n    EIPCMethod[\"BENCHMARK\"] = \"benchmark\";\n    EIPCMethod[\"HTTP\"] = \"http\";\n    EIPCMethod[\"HTTP_EXPRESS_AXIOS\"] = \"http-express-axios\";\n})(EIPCMethod = exports.EIPCMethod || (exports.EIPCMethod = {}));\n/**\n * All the mock data sizes need to be listed here (in a sensible)\n * order. Add new ones here if new ones are implemented.\n */\nvar EMockDataSize;\n(function (EMockDataSize) {\n    EMockDataSize[\"SMALL\"] = \"small\";\n    EMockDataSize[\"MEDIUM\"] = \"medium\";\n    EMockDataSize[\"LARGE\"] = \"large\";\n})(EMockDataSize = exports.EMockDataSize || (exports.EMockDataSize = {}));\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}